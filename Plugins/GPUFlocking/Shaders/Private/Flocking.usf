
struct TInfo
{
    int instanceId;
    float3 position;
    float3 velocity;
    float3 acceleration;
};

RWTexture2D<uint> OutputTexture;
float2 TextureSize;
//float Time;

//RWStructuredBuffer<float> data;

//each x,y,z of numthreads is multiplied by the respective DispatchShader x,y,z
//So for 1024x1024 threads, we could do:
//DispatchShader (32,32,1) in cpp
//numthreads(32,32,1) in usf
//equals (1024,1024,1)!
//Then you can just use ThreadId.xy for each pixel without fancy math (using a 1024x1024 texture)
[numthreads(256, 1, 1)]
//If using more than 1,1,1, threads:
//Be aware that parrellel thread are running, make sure that no thread can stomp on another threads calculations by
//writing to the same buffer/texture point
void MainComputeShader(uint3 ThreadId : SV_DispatchThreadID)
{	
    OutputTexture[ThreadId.xy] = float4(0, 1, 0, 1); 
}
